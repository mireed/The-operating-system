4.多线程属性
4.1属性结构
   typedef struct
   {
     int                  detachstate;     //线程的分离状态
     int                  schedpolicy;     //线程调度策略
     struct sched_param   schedparam;      //线程的调度参数
     int                  inheritsched;    //线程的继承性
     int                  scope;           //线程的作用域
     size_t               guardsize; 	   //线程栈末尾的警戒缓冲区大小
     int                  stackaddr_set;
     void *               stackaddr;       //线程栈的位置
     size_t               stacksize;       //线程栈的大小
    }pthread_attr_t;

4.2属性初始化
   int pthread_attr_init(pthread_attr_t *attr);
   int pthread_attr_destoroy(pthread_attr_t *attr);

4.3线程分离
   一个可结合的线程能够被其他线程收回其资源和杀死，在这之前，它的存储器资源是不释放;
       用pthread_join返回 
   一个分离的线程不能被其他线程回收或杀死，它的存储器资源在它终止时由系统自动释放;
   int pthread_attr_getdetachstate(const pthread_attr_t *attr,int *detachstate);
   int pthread_attr_setdetachstate(const pthread_attr_t *attr,int *detachstate);
      detachstate:
      PTHREAD_CREATE_DETACHED分离
      PTHREAD_CREATE_JOINABLE正常
   有些线程运行过快，可以用在线程中用pthread_cond_timewait来等待pthread_create返回.

4.4线程继承
   int pthread_attr_setinheritsched(pthread_attr_t *attr,int inheritsched);
      attr 线程属性变量
      inheritsched 线程继承性
      PTHREAD_INHERIT_SCHED表示新线程将继承创建线程的调度策略和参数
      PTHREAD_EXPLICIT_SCHED 表示shiyongschedpolicy和schedparam属性中显示设置的调度策略和参数
   int pthread_attr_getinheritsched(pthread_attr_t *attr,int inheritsched);

4.5线程调度
   int pthread_attr_setschedpolicy(const pthread_attr_t *attr,int *policy);
      policy 调度策略
      SCHED_FIFO 先进先出
         高优先级优先
      SCHED_RR 轮转法
         如果一个SCHED_RR策略的线程执行了超过一个固定时期没有阻塞，另外的SCHED_RR或SCHED_FIFO准备好时，将抢占运行的线程
      SCHED_OTHER 其他
   int pthread_attr_getschedpolicy(const pthread_attr_t *attr,int *policy);

4.6调度参数
   int pthread_attr_setschedparam(pthread_attr_t *attr,const struct sched_param *param);
      param 优先级
      int sched_get_priority_max (int policy);
      int sched_get_priority_min (int policy);
   int pthread_attr_getschedparam(pthread_attr_t *attr,const struct sched_param *param);
